/**
给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。

算法的时间复杂度应该为 O(log (m+n)) 。
**/

import java.util.Arrays;
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //方法一：
        int[] nums3 = new int[nums1.length+nums2.length];
        int y = nums1.length > nums2.length ? nums2.length : nums1.length;
        int k = 0;
        int t = 0;
        int i = 0;
        boolean flag = false;
        for(; i< nums3.length; i++){
            if(t<nums2.length && k<nums1.length){
                nums3[i] = nums1[k] < nums2[t] ? nums1[k++] : nums2[t++];
                flag = true;
            }
            
            if(t==nums2.length){
                if(flag){
                    i++;
                }
                while(i< nums3.length){
                    nums3[i++] = nums1[k++];
                }
            }else if(k==nums1.length){
                if(flag){
                    i++;
                }
                while(i< nums3.length){
                    nums3[i++] = nums2[t++];
                }
            }
        }
        
        if(nums3.length%2==1){
            return nums3[(nums3.length-1)/2]*1.0;
        }else{
            return (nums3[(nums3.length-1)/2]+nums3[(nums3.length+1)/2])/2.0;
        }

        //方法二：
        // int[] nums3 = new int[nums1.length+nums2.length];
        // System.arraycopy(nums1,0,nums3,0,nums1.length);
        // System.arraycopy(nums2,0,nums3,nums1.length,nums2.length);
        // Arrays.sort(nums3);
        
        // if(nums3.length%2==1){
        //     return nums3[(nums3.length-1)/2]*1.0;
        // }else{
        //     return (nums3[(nums3.length-1)/2]+nums3[(nums3.length+1)/2])/2.0;
        // }
    }
}
